/**
 * Cardio-in-the-VaiN
 * The API for the Cardio Center project
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FormField model module.
 * @module model/FormField
 * @version 1.0
 */
class FormField {
    /**
     * Constructs a new <code>FormField</code>.
     * @alias module:model/FormField
     * @param label {String} 
     * @param name {String} 
     * @param type {String} 
     */
    constructor(label, name, type) { 
        
        FormField.initialize(this, label, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, name, type) { 
        obj['label'] = label;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FormField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormField} obj Optional instance to populate.
     * @return {module:model/FormField} The populated <code>FormField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormField();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
            if (data.hasOwnProperty('isRequired')) {
                obj['isRequired'] = ApiClient.convertToType(data['isRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('limits')) {
                obj['limits'] = ApiClient.convertToType(data['limits'], Object);
            }
        }
        return obj;
    }


}

/**
 * @member {String} label
 */
FormField.prototype['label'] = undefined;

/**
 * @member {String} name
 */
FormField.prototype['name'] = undefined;

/**
 * @member {String} type
 */
FormField.prototype['type'] = undefined;

/**
 * @member {Array.<String>} values
 */
FormField.prototype['values'] = undefined;

/**
 * @member {Boolean} isRequired
 * @default false
 */
FormField.prototype['isRequired'] = false;

/**
 * @member {Object} limits
 */
FormField.prototype['limits'] = undefined;






export default FormField;

